@using Weaver.Data.Models;
@using Weaver.Shared.JournalComponents.Base;
@inherits Base.Draggable<JournalGrid>;
@using Microsoft.Extensions.Logging;
@inject ILogger<JGrid> logger;

<div class="mat-layout-grid-inner">
    @{
        int prevRow = 1;
        int prevCol = 1;
        int maxCols = Cols;
        int colWidth = MAX_WIDTH / maxCols;
    }
    @foreach (var item in Component.Children.OrderBy(x => x.Row).ThenBy(x => x.Col))
    {
        foreach (var cell in FillWithEmpty(prevRow, prevCol, item.Row, item.Col, maxCols, MAX_WIDTH))
        {
            @cell
        }
        <DragWrap id="@IdFromRowCol(item.Row, item.Col)" Class="@($"mat-layout-grid-cell mat-layout-grid-cell-span-{colWidth}")">
            @switch (item)
            {
                case JournalGrid jGrid:
                    {
                        <JGrid Component="@jGrid" ComponentChanged="v => ComponentChanged.InvokeAsync(Component)" />
                        break;
                    }
                case CheckBox jCheckBox:
                    {
                        {
                            <JCheckBox Component="@jCheckBox" ComponentChanged="v => onchange(v.MappedValue, ref jCheckBox)" />
                            break;
                        }
                    }
                case RadioList jRadioList:
                    {
                        <JRadioList Component="@jRadioList" ComponentChanged="v => ComponentChanged.InvokeAsync(Component)" />
                        break;
                    }
                case Toggle jToggle:
                    {
                        <JToggle Component="@jToggle" ComponentChanged="v => onchange(v.MappedValue, ref jToggle)" />
                        break;
                    }
                case TextField jTextField:
                    {
                        <JTextField Component="@jTextField" ComponentChanged="v => onchange(v.MappedValue, ref jTextField)" />
                        break;
                    }
                case TextEditor jTextEditor:
                    {
                        <JTextEditor Component="@jTextEditor" ComponentChanged="v => onchange(v.MappedValue, ref jTextEditor)" />
                        break;
                    }
                case TextArea jTextArea:
                    {
                        <JTextArea Component="@jTextArea" ComponentChanged="v => onchange(v.MappedValue, ref jTextArea)" />
                        break;
                    }
                case DatePicker jDatePicker:
                    {
                        <JDatePicker Component="@jDatePicker" ComponentChanged="v => onchange(v.MappedValue, ref jDatePicker)" />
                        break;
                    }
                case FileUploadView jFileUploadView:
                    {
                        <JFileUploadView Component="@jFileUploadView" ComponentChanged="v => onchange(v.MappedValue, ref jFileUploadView)" />
                        break;
                    }
                case NumericField jNumericField:
                    {
                        <JNumericField Component="@jNumericField" ComponentChanged="v => onchange(v.MappedValue, ref jNumericField)" />
                        break;
                    }
                case SelectField jSelectField:
                    {
                        <JSelectField Component="@jSelectField" ComponentChanged="v => onchange(v.MappedValue, ref jSelectField)" />
                        break;
                    }
                case Slider jSlider:
                    {
                        <JSlider Component="@jSlider" ComponentChanged="v => onchange(v.MappedValue, ref jSlider)" />
                        break;
                    }
            }
        </DragWrap>

        prevRow = item.Row;
        prevCol = item.Col;
    }
</div>

@code{
    private string IdFromRowCol(int row, int col) => $"cell{row}_{col}";

    private RenderFragment EmptyCell(int width, int row, int col)
    {
        RenderFragment cell = c =>
        {
            c.OpenElement(0, "div");
            c.AddAttribute(1, "id", IdFromRowCol(row, col));
            c.AddAttribute(2, "class", $"mat-layout-grid-cell mat-layout-grid-cell-span-{width}");
            c.CloseElement();
        };
        return cell;
    }

    private IEnumerable<RenderFragment> FillWithEmpty(int rowStart, int colStart, int rowEnd, int colEnd, int maxCols, int maxWidth)
    {
        int colWidth             = maxWidth / maxCols;
        int rowNum               = rowEnd - rowStart - 1;
        int cellNum              = rowNum * maxCols - colStart + colEnd + 1;
        (int curRow, int curCol) = GetNextPoint(rowStart, colStart, maxCols);

        for (int i = 0; i < cellNum; ++i)
        {
            yield return EmptyCell(colWidth, curRow, curCol);
            (curRow, curCol) = GetNextPoint(curRow, curCol, maxCols);
        }
    }

    private Task onchange<U, T>(U val, ref T item)
        where T : ValueComponent<U>
    {
        item.MappedValue = val;
        return ComponentChanged.InvokeAsync(Component);
    }
}
