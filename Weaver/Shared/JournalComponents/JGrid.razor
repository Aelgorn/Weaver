@using Newtonsoft.Json;
@using Weaver.Data.Models;
@using Weaver.Shared.JournalComponents.Base;
@using Blazor.DragDrop.Core;
@inherits Base.JComponent<JournalGrid>;
@using System.Linq;

<Dropzone Name="@DropzoneName" AllowSwap="true" Accepts="d => d.Parent == DropzoneName">
    @{
        int idx = 0;
    }

    @foreach (JournalComponent item in Component.Children.OrderBy(x => x.Position))
    {
        var ren = RenderJC(item, idx);
        @if (Building)
        {
            <Draggable Name="@IdFromRow(idx)" Tag="new { Parent = DropzoneName }"
                       OnDrop="OnDrop">
                @ren
            </Draggable>
        }
        else
        {
            <div id="@IdFromRow(idx)">
                @ren
            </div>
        }
        ++idx;
    }
</Dropzone>

@code{
    private List<IJComponent?> childrenRefs = new List<IJComponent?>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        childrenRefs.AddRange(Enumerable.Range(0, Component.Children.Count).Select(_ => (IJComponent?)null));
    }

    private RenderFragment? RenderJC(JournalComponent item, int pos)
    {
        RenderFragment? rf = item switch
        {
            CheckBox jCheckBox
                => @<JCheckBox @ref="childrenRefs[pos]" Edit="Edit" Component="@jCheckBox" ComponentChanged="v => onchange(v.MappedValue, ref jCheckBox)" />,
            RadioList jRadioList
                => @<JRadioList @ref="childrenRefs[pos]" Edit="Edit" Component="@jRadioList" ComponentChanged="v => ComponentChanged.InvokeAsync(Component)" />,
            Toggle jToggle
                => @<JToggle @ref="childrenRefs[pos]" Edit="Edit" Component="@jToggle" ComponentChanged="v => onchange(v.MappedValue, ref jToggle)" />,
            TextField jTextField
                => @<JTextField @ref="childrenRefs[pos]" Edit="Edit" Component="@jTextField" ComponentChanged="v => onchange(v.MappedValue, ref jTextField)" />,
            TextEditor jTextEditor
                => @<JTextEditor @ref="childrenRefs[pos]" Edit="Edit" Component="@jTextEditor" ComponentChanged="v => onchange(v.MappedValue, ref jTextEditor)" />,
            TextArea jTextArea
                => @<JTextArea @ref="childrenRefs[pos]" Edit="Edit" Component="@jTextArea" ComponentChanged="v => onchange(v.MappedValue, ref jTextArea)" />,
            DatePicker jDatePicker
                => @<JDatePicker @ref="childrenRefs[pos]" Edit="Edit" Component="@jDatePicker" ComponentChanged="v => onchange(v.MappedValue, ref jDatePicker)" />,
            FileUploadView jFileUploadView
                => @<JFileUploadView @ref="childrenRefs[pos]" Edit="Edit" Component="@jFileUploadView" ComponentChanged="v => onchange(v.MappedValue, ref jFileUploadView)" />,
            NumericField jNumericField
                => @<JNumericField @ref="childrenRefs[pos]" Edit="Edit" Component="@jNumericField" ComponentChanged="v => onchange(v.MappedValue, ref jNumericField)" />,
            SelectField jSelectField
                => @<JSelectField @ref="childrenRefs[pos]" Edit="Edit" Component="@jSelectField" ComponentChanged="v => onchange(v.MappedValue, ref jSelectField)" />,
            Slider jSlider
                => @<JSlider @ref="childrenRefs[pos]" Edit="Edit" Component="@jSlider" ComponentChanged="v => onchange(v.MappedValue, ref jSlider)" />,
            _ => throw new NotImplementedException($"Journal Component not supported: {JsonConvert.SerializeObject(item, Formatting.Indented)}")
        };
        return rf;
    }
}
